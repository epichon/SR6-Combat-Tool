#ifndef _DMRND_H
#define _DMRND_H

// This file was automatically generated by objch.

//==============================================================================
//
//   DMRnd - the Mersenne Twister pseudo random generator in the ofc-library
//
//               Copyright (C) 2006  Dick van Oudheusden
//  
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public
// License as published by the Free Software Foundation; either
// version 2 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this library; if not, write to the Free
// Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
//==============================================================================
// 
//  $Date: 2006/09/20 17:46:00 $ $Revision: 1.1 $
//
//==============================================================================
#include <stdint.h>

//#include "config.h"

#include "DRandomable.h"
#import <Foundation/Foundation.h>



#define DMRD_N     (624)
#define DMRD_M     (397)

//
// The DMRnd class implements a pseudo random generator bases on the
// Mersenne Twister pseudo random generator. It is not only very fast,
// but it also passes the Marsaglia's 'Diehard' statistical tests and 
// it has a very long period of 2^19937 - 1.
//
 //DRandomable
@interface DMRnd : NSObject <DRandomable>
{
@private
  uint32_t _mt[DMRD_N];  // the state
  int      _mti;         // the index in state
}


//// Constructors

//
// Initialise a non-seeded random generator
//
// @return the object
//
- (DMRnd *) init;

//
// Initialise a seeded random generator
//
// @param seed     the seed to be used
// 
// @return the object
//
- (DMRnd *) init :(unsigned long) seed;


//// Member methods

//
// Set the seed for the random generator
// 
// @param seed     the seed for the random generator
//
// @return the object
//
- (DMRnd *) seed :(unsigned long) seed;


//// Random generator methods

//
// Get the next long (32 bit) from the generator
//  
// @return the next long
//
- (long) nextLong ;

//
// Get the next ranged long (32 bit) from the generator
// 
// @param from     the start of the range
// @param to       the end of the range
// 
// @return the next long
// 
- (long) nextLong :(long) from :(long) to;

//
// Get the next integer (32 bit) from the generator
//  
// @return the next integer
//
- (int) nextInt;

//
// Get the next ranged integer (32 bit) from the generator
// 
// @param from     the start of the range
// @param to       the end of the range
// 
// @return the next integer
// 
- (int) nextInt :(int) from :(int) to;

//
// Get the next double from the generator (0 <= d < 1)
//  
// @return the next double
//
- (double) nextDouble;

//
// Get the next double from the generator (from <= dE < to)
// 
// @param from     the start of the range
// @param to       the end of the range
// 
// @return the next double
// 
- (double) nextDouble :(double) from :(double) to;


//// Private methods

//
// Get the next 32-bit value from the generator
// 
// @return the next 32-bit value
// 
- (uint32_t) _nextValue;

@end
#endif
